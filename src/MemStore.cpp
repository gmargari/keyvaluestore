#include "Global.h"
#include "MemStore.h"

/*========================================================================
 *                               MemStore
 *========================================================================*/
MemStore::MemStore()
{
    m_maxsize = DEFAULT_MEMSTORE_SIZE;
    m_kvmap = new KVMap();
}

/*========================================================================
 *                              ~MemStore
 *========================================================================*/
MemStore::~MemStore()
{
    delete m_kvmap;
}

/*========================================================================
 *                             set_maxsize
 *========================================================================*/
void MemStore::set_maxsize(uint64_t maxsize)
{
    m_maxsize = maxsize;
}

/*========================================================================
 *                             get_maxsize
 *========================================================================*/
uint64_t MemStore::get_maxsize(void)
{
    return m_maxsize;
}

/*========================================================================
 *                                 put
 *========================================================================*/
bool MemStore::put(const char *key, const char *value)
{
    return m_kvmap->put(key,value);
}

/*========================================================================
 *                                 get
 *========================================================================*/
const char *MemStore::get(const char *key)
{
    return m_kvmap->get(key);
}

/*========================================================================
 *                               num_keys
 *========================================================================*/
uint64_t MemStore::num_keys()
{
    return m_kvmap->num_keys();
}

/*========================================================================
 *                                 size
 *========================================================================*/
uint64_t MemStore::size()
{
    return m_kvmap->size();
}

/*========================================================================
 *                                is_full
 *========================================================================*/
bool MemStore::is_full()
{
    return (size() > m_maxsize);
}


/*========================================================================
 *                                 clear
 *========================================================================*/
void MemStore::clear()
{
    m_kvmap->clear();
}

/*=======================================================================*
 *                              sanity_check
 *=======================================================================*/
void MemStore::sanity_check()
{
    return_if_dbglvl_lt_2();
}
